import random
import string

def generate_password(length=12, include_uppercase=True, include_lowercase=True, 
                     include_numbers=True, include_symbols=True):
    """
    Generate a secure random password with customizable options.
    
    Args:
        length (int): Length of the password (default: 12)
        include_uppercase (bool): Include uppercase letters
        include_lowercase (bool): Include lowercase letters
        include_numbers (bool): Include numbers
        include_symbols (bool): Include special symbols
    
    Returns:
        str: Generated password
    """
    
    if length < 4:
        raise ValueError("Password length should be at least 4 characters")
    
    # Build character set based on options
    chars = ""
    
    if include_lowercase:
        chars += string.ascii_lowercase
    if include_uppercase:
        chars += string.ascii_uppercase
    if include_numbers:
        chars += string.digits
    if include_symbols:
        chars += "!@#$%^&*()_+-=[]{}|;:,.<>?"
    
    if not chars:
        raise ValueError("At least one character type must be selected")
    
    # Generate password
    password = ''.join(random.choice(chars) for _ in range(length))
    
    return password

def check_password_strength(password):
    """
    Check the strength of a password and provide feedback.
    
    Args:
        password (str): Password to check
    
    Returns:
        dict: Strength analysis
    """
    
    analysis = {
        'length': len(password),
        'has_uppercase': any(c.isupper() for c in password),
        'has_lowercase': any(c.islower() for c in password),
        'has_numbers': any(c.isdigit() for c in password),
        'has_symbols': any(c in "!@#$%^&*()_+-=[]{}|;:,.<>?" for c in password),
        'strength': 'Weak'
    }
    
    # Calculate strength score
    score = 0
    if analysis['length'] >= 8:
        score += 1
    if analysis['length'] >= 12:
        score += 1
    if analysis['has_uppercase']:
        score += 1
    if analysis['has_lowercase']:
        score += 1
    if analysis['has_numbers']:
        score += 1
    if analysis['has_symbols']:
        score += 1
    
    if score >= 5:
        analysis['strength'] = 'Strong'
    elif score >= 3:
        analysis['strength'] = 'Medium'
    
    return analysis

# Demo usage
if __name__ == "__main__":
    print("=== Password Generator ===")
    
    # Generate sample passwords
    strong_password = generate_password(16)
    medium_password = generate_password(10, include_symbols=False)
    
    print(f"Strong Password: {strong_password}")
    print(f"Medium Password: {medium_password}")
    
    # Check strength
    for pwd in [strong_password, medium_password]:
        strength = check_password_strength(pwd)
        print(f"Password: {pwd} - Strength: {strength['strength']}")
